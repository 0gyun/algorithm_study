/**
 * 2023.06.23 ~ 2023.06.25
 * 
 * 백준 1149번 문제 (https://www.acmicpc.net/problem/1149)
 * 
 * RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.
 * 
 * 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 
 * 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.
 * 
 * 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
 * N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
 * i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
 * 
 * 입력
 * 
 * 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 
 * 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 
 * 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.
 * 
 * 출력
 * 
 * 첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.
*/
#include <iostream>
#include <vector>
using namespace std;

int main()
{
    int n; // n = 집의 수
    scanf("%d", &n);
    
    /**
     * 각 집에 부여된 비용들. 근데 각 색마다 이후에 어떤 색을 고르면 어느 비용이 나오는지 저장할 공간이 존재.
     * 0차원 : rgb / 1차원 : 비용(입력받은 -> 현재의 총 비용) & 이후 고른 색의 총 비용1 & 이후 고른 색의 총 비용2 / 2차원 : 각 집의 인덱스
    */
    vector<vector<vector<int> > > rgb(3, vector<vector<int> >(3, (vector<int>(n+1,0)))); 

    for(int i = 1; i <= n; i++)
    {
        for(int j = 0; j < 3; j++)
        {
            int color;
            scanf("%d", &color);

            rgb[j][0][i] = color; // 각 집마다의 각 색깔마다 값 저장
            if(i == n) // 마지막 집은 이후 고를 색이 없으니 이후 고른 색의 총 비용에 현재 비용을 넣는다.
            {
                rgb[j][1][i] = color;
                rgb[j][2][i] = color;
            }
        }
    }

    for(int i = n-1; i > 0; i--) // 마지막 이전 집부터 시작한다.
    {
        /**
         * 자기 비용을 위에 전달한다.
         * r(0) -> 위에 [g][1][] , [b][2][]
         * b(1) -> 위에 [r][1][], [g][2][]
         * g(2) -> 위에 [r][2][], [b][1][]
        */
        rgb[0][1][i] = rgb[1][0][i+1];
        rgb[0][2][i] = rgb[2][0][i+1];
        rgb[1][1][i] = rgb[2][0][i+1];
        rgb[1][2][i] = rgb[0][0][i+1];
        rgb[2][1][i] = rgb[0][0][i+1];
        rgb[2][2][i] = rgb[1][0][i+1];

        // 밑에서 받은 값들을 비교해서 적은 값과 자신을 더해서 현재의 총 비용을 저장한다.
        rgb[0][0][i] = min(rgb[0][1][i], rgb[0][2][i]) + rgb[0][0][i];
        rgb[1][0][i] = min(rgb[1][1][i], rgb[1][2][i]) + rgb[1][0][i];
        rgb[2][0][i] = min(rgb[2][1][i], rgb[2][2][i]) + rgb[2][0][i];
    }

    int ans = min(rgb[0][0][1], rgb[1][0][1]);
    ans = min(ans, rgb[2][0][1]);
    printf("%d\n", ans);
}